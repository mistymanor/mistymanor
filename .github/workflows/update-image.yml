name: Update Website Image

on:
  workflow_dispatch:
    inputs:
      target_image:
        description: 'Select image to update'
        required: true
        type: choice
        options:
          - 'Main Banner with Logo (images/MMBannerWithLogo.jpg)'
          - 'Logo for Site Usage (images/MMLogo.png)'
          - 'Tiny Logo for Tab Icon (images/MMIcon.png)'
          - 'Trail Rides Banner (images/MMTrailRidesBanner.jpeg)'
          - 'Lessons Banner (images/MMLessonsBanner.jpeg)'
          - 'Volunteering Banner (images/MMVolunteersBanner.jpg)'
          - 'Meet Our Horses Banner (images/MMHorsesBanner.jpeg)'
          - 'Contact Page Banner (images/MMContactBanner.jpeg)'
          - 'Whats New Page Banner (images/MMWhatsNewBanner.png)'
          - 'Site Footer Image (images/footer.jpeg)'
          - 'Cowboy Camp Advertisement (images/CowboyCampAd.jpg)'
          - 'Hello Spring Promotion Banner (images/HelloSpring.png)'
          - 'Woodstock Event Advertisement (images/WoodstockAd.png)'
      source_image:
        description: 'Enter source image name without extension (e.g., "MMBanner" for images/MMBanner.jpeg). WARNING!!! -> This will overwrite any existing image with the same name. ALSO!! -> We currently support image extensions: jpg, jpeg, png, gif, webp. If you need to convert it to one of these, you must do so (can be done online here: https://cloudconvert.com/image-converter). If you change the extension of the image, it will update all references in HTML files.'
        required: true
        type: string

jobs:
  update-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
          
      - name: Set target image path
        id: set-target
        run: |
          TARGET_DESC="${{ github.event.inputs.target_image }}"
          
          # Extract the path from the description (format: "Description (path)")
          TARGET_PATH=$(echo "$TARGET_DESC" | sed -E 's/.*\((.*)\).*/\1/')
          
          if [ -z "$TARGET_PATH" ]; then
            echo "Error: Could not extract target image path from '$TARGET_DESC'"
            exit 1
          fi
          
          echo "TARGET_PATH=$TARGET_PATH" >> $GITHUB_ENV
          echo "Target image to update: $TARGET_PATH"

      - name: Process source image
        id: process-source
        run: |
          mkdir -p temp_images
          
          SOURCE_NAME="${{ github.event.inputs.source_image }}"
          
          if [ -z "$SOURCE_NAME" ]; then
            echo "Error: No source image name provided"
            exit 1
          fi
          
          echo "Looking for image with name: $SOURCE_NAME"
          
          # Find matching files in the images directory with any extension
          # Look for common image extensions jpg, jpeg, png, gif, webp
          MATCHES=$(find images -type f -name "$SOURCE_NAME.*" | grep -E '\.jpg$|\.jpeg$|\.png$|\.gif$|\.webp$')
          MATCH_COUNT=$(echo "$MATCHES" | grep -v "^$" | wc -l)
          
          if [ "$MATCH_COUNT" -eq 0 ]; then
            echo "Error: No matching images found for '$SOURCE_NAME'"
            echo "Available images:"
            find images -type f | grep -E '\.jpg$|\.jpeg$|\.png$|\.gif$|\.webp$' | xargs basename | sort
            exit 1
          elif [ "$MATCH_COUNT" -gt 1 ]; then
            echo "Warning: Multiple matches found for '$SOURCE_NAME'. Using the first match."
            echo "Matches:"
            echo "$MATCHES"
            # Use the first match
            SOURCE_PATH=$(echo "$MATCHES" | head -n 1)
          else
            SOURCE_PATH="$MATCHES"
          fi
          
          # Set source image path for later use
          echo "SOURCE_IMAGE=$SOURCE_PATH" >> $GITHUB_ENV
          echo "Using existing image: $SOURCE_PATH"

      - name: Update the image
        run: |
          # Enable error handling and debugging
          set -e   # Exit immediately if a command fails
          set -x   # Print each command before executing it
          
          echo "===== STARTING IMAGE UPDATE PROCESS ====="
          
          # Store the complete target filename and path
          TARGET_DIR=$(dirname "$TARGET_PATH")
          TARGET_FILENAME=$(basename "$TARGET_PATH")
          TARGET_BASENAME=$(echo "$TARGET_FILENAME" | cut -d. -f1)
          TARGET_EXT=$(echo "$TARGET_FILENAME" | grep -o '\.[^.]*$' | sed 's/\.//')
          
          echo "Target directory: $TARGET_DIR"
          echo "Target filename: $TARGET_FILENAME"
          echo "Target basename: $TARGET_BASENAME"
          echo "Target extension: $TARGET_EXT"
          
          # Get the source file details
          SOURCE_FILENAME=$(basename "$SOURCE_IMAGE")
          SOURCE_EXT=$(echo "$SOURCE_IMAGE" | grep -o '\.[^.]*$' | sed 's/\.//')
          echo "Source filename: $SOURCE_FILENAME"
          echo "Source extension: $SOURCE_EXT"
          
          # Flag to check if we need to update references (only if extension changes)
          EXTENSION_CHANGED=false
          if [ "$TARGET_EXT" != "$SOURCE_EXT" ]; then
            echo "Extension will change from .$TARGET_EXT to .$SOURCE_EXT - will update references"
            EXTENSION_CHANGED=true
          fi
          
          # Debug: Check if source and target exist and show file info
          echo "===== FILE CHECKSUMS BEFORE OPERATIONS ====="
          echo "Source image ($SOURCE_IMAGE):"
          if [ -f "$SOURCE_IMAGE" ]; then
            ls -la "$SOURCE_IMAGE"
            md5sum "$SOURCE_IMAGE" || shasum "$SOURCE_IMAGE"
          else
            echo "ERROR: Source image does not exist!"
          fi
          
          echo "Target image ($TARGET_PATH):"
          if [ -f "$TARGET_PATH" ]; then
            ls -la "$TARGET_PATH"
            md5sum "$TARGET_PATH" || shasum "$TARGET_PATH"
          else
            echo "Target image does not exist (will be created)"
          fi
          
          # Create archive folder inside the images directory
          echo "===== CREATING ARCHIVE DIRECTORY ====="
          mkdir -p "images/archive"
          echo "Created archive directory: images/archive"
          ls -la "images"
          
          # Move the original target image to the archive folder (simple move operation)
          if [ -f "$TARGET_PATH" ]; then
            # Keep the original filename in the archive
            ARCHIVE_PATH="images/archive/$TARGET_FILENAME"
            
            # Check if a file with the same name already exists in the archive
            if [ -f "$ARCHIVE_PATH" ]; then
              # Add timestamp only if needed for uniqueness
              TIMESTAMP=$(date +"%Y%m%d%H%M%S")
              ARCHIVE_PATH="images/archive/${TARGET_BASENAME}_${TIMESTAMP}.${TARGET_EXT}"
              echo "File already exists in archive, using timestamped name: $ARCHIVE_PATH"
            fi
            
            echo "Moving target image to archive: $TARGET_PATH -> $ARCHIVE_PATH"
            
            # Simply move the file to archive
            mv -v "$TARGET_PATH" "$ARCHIVE_PATH"
            
            # Verify move operation
            if [ -f "$ARCHIVE_PATH" ]; then
              echo "Successfully moved original image to archive:"
              ls -la "$ARCHIVE_PATH"
            else
              echo "WARNING: Failed to move original image to archive."
            fi
          else
            echo "No existing target image to archive"
          fi
          
          # Generate new file path with original target basename but source extension
          NEW_FILE_PATH="$TARGET_DIR/$TARGET_BASENAME.$SOURCE_EXT"
          echo "New file path will be: $NEW_FILE_PATH"
          
          # Ensure target directory exists
          mkdir -p "$TARGET_DIR"
          echo "Ensured target directory exists: $TARGET_DIR"
          
          # Check if source image exists before proceeding
          if [ ! -f "$SOURCE_IMAGE" ]; then
            echo "ERROR: Source image does not exist: $SOURCE_IMAGE"
            ls -la "$(dirname "$SOURCE_IMAGE")"
            exit 1
          fi
          
          # Save absolute paths to avoid any path-related issues
          SOURCE_ABS_PATH="$(cd "$(dirname "$SOURCE_IMAGE")" && pwd)/$(basename "$SOURCE_IMAGE")"
          TARGET_DIR_ABS="$(cd "$TARGET_DIR" && pwd)"
          NEW_FILE_ABS_PATH="$TARGET_DIR_ABS/$(basename "$NEW_FILE_PATH")"
          
          echo "Using absolute paths:"
          echo "Source: $SOURCE_ABS_PATH"
          echo "Target dir: $TARGET_DIR_ABS"
          echo "New file: $NEW_FILE_ABS_PATH"
          
          # Simply rename (move) the source image to the target name
          echo "Renaming source image to target name: $SOURCE_ABS_PATH -> $NEW_FILE_ABS_PATH"
          mv -v "$SOURCE_ABS_PATH" "$NEW_FILE_ABS_PATH"
          
          # Verify rename operation
          if [ -f "$NEW_FILE_ABS_PATH" ]; then
            echo "Successfully renamed source to target name:"
            ls -la "$NEW_FILE_ABS_PATH"
            md5sum "$NEW_FILE_ABS_PATH" || shasum "$NEW_FILE_ABS_PATH"
          else
            echo "ERROR: Failed to rename source to target name!"
            exit 1
          fi
          
          # Update NEW_FILE_PATH to use the absolute path for subsequent steps
          NEW_FILE_PATH="$NEW_FILE_ABS_PATH"
          
          echo "===== IMAGE UPDATE PROCESS COMPLETE ====="
          echo "Successfully updated image: $TARGET_BASENAME (old: $TARGET_PATH, new: $NEW_FILE_PATH, source: $SOURCE_IMAGE)"
          
          # Record important variables for later steps
          echo "UPDATED_IMAGE_PATH=$NEW_FILE_PATH" >> $GITHUB_ENV
          echo "EXTENSION_CHANGED=$EXTENSION_CHANGED" >> $GITHUB_ENV
          echo "TARGET_EXT=$TARGET_EXT" >> $GITHUB_ENV
          echo "SOURCE_EXT=$SOURCE_EXT" >> $GITHUB_ENV

          # Final check to verify operations were successful
          echo "Final verification of file operations:"
          
          # Check that source file no longer exists at original location (it was moved)
          if [ -f "$SOURCE_IMAGE" ]; then
            echo "WARNING: Source image still exists at original location: $SOURCE_IMAGE"
            ls -la "$SOURCE_IMAGE"
          else
            echo "Confirmed: Source image no longer exists at original location (successful move)"
          fi
          
          # Verify new file is present as final check
          if [ ! -f "$NEW_FILE_PATH" ]; then
            echo "ERROR: Final check shows new file doesn't exist: $NEW_FILE_PATH"
            exit 1
          else
            echo "FINAL SUCCESS: Target file exists at $NEW_FILE_PATH"
            ls -la "$NEW_FILE_PATH"
          fi
          
          # Disable debug output to avoid polluting the rest of the workflow
          set +x

          echo "Moving any remaining source image variants to archive..."
          for src_img in $(find images -maxdepth 1 -type f -name "$SOURCE_NAME.*"); do
            # Skip if already moved to the target location
            if [ -f "$src_img" ]; then
              # Create unique archive name with timestamp if needed
              ARCHIVE_SRC_NAME="images/archive/$(basename "$src_img")"
              if [ -f "$ARCHIVE_SRC_NAME" ]; then
                TIMESTAMP=$(date +"%Y%m%d%H%M%S")
                ARCHIVE_SRC_NAME="images/archive/${SOURCE_NAME}_${TIMESTAMP}.$(echo "$src_img" | grep -o '\.[^.]*$' | sed 's/\.//')"
              fi
              echo "Moving source image to archive: $src_img -> $ARCHIVE_SRC_NAME"
              mv -v "$src_img" "$ARCHIVE_SRC_NAME"
            fi
          done
      
      - name: Update configuration file
        run: |
          # If this is a new image that doesn't exist in the config yet, add it
          if ! grep -q "$TARGET_PATH" config/image-config.json; then
            # Extract filename without path and extension for a default description
            FILENAME=$(basename "$TARGET_PATH")
            DESCRIPTION="${FILENAME%.*} Image"
            
            # Add to both site_images and available_images
            NEW_ENTRY="{\"path\":\"$TARGET_PATH\",\"description\":\"$DESCRIPTION\",\"category\":\"Image\"}"
            
            # Use jq to modify the JSON file
            jq --arg entry "$NEW_ENTRY" '.site_images += [$entry | fromjson]' config/image-config.json > config/temp.json
            jq --arg entry "$NEW_ENTRY" '.available_images += [$entry | fromjson]' config/temp.json > config/image-config.json
            rm config/temp.json
            
            echo "Added new image to configuration: $TARGET_PATH"
          fi
      
      - name: Clean up
        run: |
          rm -rf temp_images
      
      - name: Update HTML references
        if: ${{ env.EXTENSION_CHANGED == 'true' }}
        run: |
          echo "Extension changed from .$TARGET_EXT to .$SOURCE_EXT - updating references"
          
          # Create a script to update HTML files to use the new file extension
          cat > update_references.py << 'EOF'
          import os
          import re
          import sys

          def update_html_references(html_dir, image_basename, old_ext, new_ext):
              """Update HTML files to use the new file extension."""
              pattern = re.compile(r'(src=["\'](/images/|images/|/|))' + re.escape(image_basename) + r'\.' + re.escape(old_ext) + r'(["\'"])')
              replacement = r'\1' + image_basename + r'.' + new_ext + r'\3'
              
              for root, _, files in os.walk(html_dir):
                  for file in files:
                      if file.endswith('.html'):
                          filepath = os.path.join(root, file)
                          try:
                              with open(filepath, 'r') as f:
                                  content = f.read()
                              
                              # Check if this file contains references to the image with old extension
                              if re.search(pattern, content):
                                  print(f"Updating references in {filepath} from {image_basename}.{old_ext} to {image_basename}.{new_ext}")
                                  updated_content = re.sub(pattern, replacement, content)
                                  
                                  with open(filepath, 'w') as f:
                                      f.write(updated_content)
                          except Exception as e:
                              print(f"Error processing {filepath}: {e}")

          if __name__ == "__main__":
              if len(sys.argv) != 5:
                  print("Usage: python update_references.py <html_directory> <image_basename> <old_extension> <new_extension>")
                  sys.exit(1)
                  
              html_dir = sys.argv[1]
              image_basename = sys.argv[2]
              old_ext = sys.argv[3]
              new_ext = sys.argv[4]
              update_html_references(html_dir, image_basename, old_ext, new_ext)
          EOF
          
          # Make the script executable
          chmod +x update_references.py
          
          # Extract basename from the target path
          TARGET_BASENAME=$(basename "$TARGET_PATH" | cut -d. -f1)
          
          # Run the script to update references with the specific extensions
          python update_references.py . "$TARGET_BASENAME" "$TARGET_EXT" "$SOURCE_EXT"
          
          echo "Updated HTML references from $TARGET_BASENAME.$TARGET_EXT to $TARGET_BASENAME.$SOURCE_EXT"
          
          # Clean up the script after it's been used
          rm -f update_references.py

      - name: Update image entry in config
        run: |
          # Update the config file to reflect the new file path if it changed
          if [ "$TARGET_PATH" != "$UPDATED_IMAGE_PATH" ]; then
            # Use jq to replace the path in the config file
            jq --arg old_path "$TARGET_PATH" --arg new_path "$UPDATED_IMAGE_PATH" '
            (.site_images[] | select(.path == $old_path)).path = $new_path |
            (.available_images[] | select(.path == $old_path)).path = $new_path
            ' config/image-config.json > config/temp.json
            
            mv config/temp.json config/image-config.json
            echo "Updated image path in config file"
          fi

      - name: Commit and push changes
        run: |
          # Enable error handling
          set -e
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Debug: Show which files have been modified
          echo "===== GIT STATUS BEFORE ADDING FILES ====="
          git status
          
          echo "===== CHECKING IF FILES EXIST ====="
          echo "Target path: $UPDATED_IMAGE_PATH"
          ls -la "$UPDATED_IMAGE_PATH" || echo "Target file not found"
          echo "Archive directory:"
          ls -la images/archive/ || echo "Archive directory not found"
          
          # Show git diff to see what's changed
          echo "===== GIT DIFF BEFORE ADDING FILES ====="
          git diff
          
          # Add all HTML files that might have been modified
          echo "===== ADDING HTML FILES ====="
          find . -name "*.html" -type f -exec git add {} \;
          
          # Add the new image file with force flag
          echo "===== ADDING UPDATED IMAGE: $UPDATED_IMAGE_PATH ====="
          git add -f "$UPDATED_IMAGE_PATH" || echo "Failed to add updated image"
          
          # Add config file
          echo "===== ADDING CONFIG FILE ====="
          git add -f config/image-config.json || echo "Failed to add config file"
          
          # Add the archive directory to include the moved image
          if [ -d "images/archive" ]; then
            echo "===== ADDING ARCHIVE DIRECTORY ====="
            git add -f images/archive/ || echo "Failed to add archive directory"
          fi
          
          # Debug: Show which files have been staged
          echo "===== GIT STATUS AFTER ADDING FILES ====="
          git status
          
          # Show git diff for staged changes
          echo "===== GIT DIFF FOR STAGED CHANGES ====="
          git diff --staged
          
          TARGET_DESC="${{ github.event.inputs.target_image }}"
          SOURCE_DESC="${{ github.event.inputs.source_image }}"
          COMMIT_MSG="Update image: $TARGET_DESC with $SOURCE_DESC (extension-agnostic)"
          
          git commit -m "$COMMIT_MSG"
          git push
      
      - name: Trigger GitHub Pages Deployment
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: "Deploy static content to Pages"
          token: ${{ secrets.GITHUB_TOKEN }}
