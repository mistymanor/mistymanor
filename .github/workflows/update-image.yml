name: Update Website Image

on:
  workflow_dispatch:
    inputs:
      target_image:
        description: 'Select image to update'
        required: true
        type: choice
        options:
          - 'Main Banner with Logo (images/MMBannerWithLogo.jpg)'
          - 'Logo for Site Usage (images/MMLogo.png)'
          - 'Tiny Logo for Tab Icon (images/MMIcon.png)'
          - 'Trail Rides Banner (images/MMTrailRidesBanner.jpeg)'
          - 'Lessons Banner (images/MMLessonsBanner.jpeg)'
          - 'Volunteering Banner (images/MMVolunteersBanner.jpg)'
          - 'Meet Our Horses Banner (images/MMHorsesBanner.jpeg)'
          - 'Contact Page Banner (images/MMContactBanner.jpeg)'
          - 'Whats New Page Banner (images/MMWhatsNewBanner.png)'
          - 'Site Footer Image (images/footer.jpeg)'
          - 'Cowboy Camp Advertisement (images/CowboyCampAd.jpg)'
          - 'Hello Spring Promotion Banner (images/HelloSpring.png)'
          - 'Woodstock Event Advertisement (images/WoodstockAd.png)'
      source_image:
        description: 'Enter source image name without extension (e.g., "MMBanner" for images/MMBanner.jpeg). WARNING!!! -> This will overwrite any existing image with the same name.'
        required: true
        type: string

jobs:
  update-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
          
      - name: Set target image path
        id: set-target
        run: |
          TARGET_DESC="${{ github.event.inputs.target_image }}"
          
          # Extract the path from the description (format: "Description (path)")
          TARGET_PATH=$(echo "$TARGET_DESC" | sed -E 's/.*\((.*)\).*/\1/')
          
          if [ -z "$TARGET_PATH" ]; then
            echo "Error: Could not extract target image path from '$TARGET_DESC'"
            exit 1
          fi
          
          echo "TARGET_PATH=$TARGET_PATH" >> $GITHUB_ENV
          echo "Target image to update: $TARGET_PATH"

      - name: Process source image
        id: process-source
        run: |
          mkdir -p temp_images
          
          SOURCE_NAME="${{ github.event.inputs.source_image }}"
          
          if [ -z "$SOURCE_NAME" ]; then
            echo "Error: No source image name provided"
            exit 1
          fi
          
          echo "Looking for image with name: $SOURCE_NAME"
          
          # Find matching files in the images directory with any extension
          # Look for common image extensions jpg, jpeg, png, gif, webp
          MATCHES=$(find images -type f -name "$SOURCE_NAME.*" | grep -E '\.jpg$|\.jpeg$|\.png$|\.gif$|\.webp$')
          MATCH_COUNT=$(echo "$MATCHES" | grep -v "^$" | wc -l)
          
          if [ "$MATCH_COUNT" -eq 0 ]; then
            echo "Error: No matching images found for '$SOURCE_NAME'"
            echo "Available images:"
            find images -type f | grep -E '\.jpg$|\.jpeg$|\.png$|\.gif$|\.webp$' | xargs basename | sort
            exit 1
          elif [ "$MATCH_COUNT" -gt 1 ]; then
            echo "Warning: Multiple matches found for '$SOURCE_NAME'. Using the first match."
            echo "Matches:"
            echo "$MATCHES"
            # Use the first match
            SOURCE_PATH=$(echo "$MATCHES" | head -n 1)
          else
            SOURCE_PATH="$MATCHES"
          fi
          
          # Set source image path for later use
          echo "SOURCE_IMAGE=$SOURCE_PATH" >> $GITHUB_ENV
          echo "Using existing image: $SOURCE_PATH"

      - name: Update the image
        run: |
          # Get the target basename and directory
          TARGET_DIR=$(dirname "$TARGET_PATH")
          TARGET_BASENAME=$(basename "$TARGET_PATH" | cut -d. -f1)
          
          # Get the source file extension from filename
          SOURCE_EXT=$(echo "$SOURCE_IMAGE" | grep -o '\.[^.]*$' | sed 's/\.//')
          
          # Make backup of original if it exists
          if [ -f "$TARGET_PATH" ]; then
            mkdir -p backups
            cp "$TARGET_PATH" "backups/$(basename "$TARGET_PATH").$(date +%Y%m%d%H%M%S).bak"
          fi
          
          # Generate new file path with original basename but new extension
          NEW_FILE_PATH="$TARGET_DIR/$TARGET_BASENAME.$SOURCE_EXT"
          
          # Remove any existing files with the target basename (all extensions)
          find "$TARGET_DIR" -name "$TARGET_BASENAME.*" -type f -delete
          
          # Ensure target directory exists
          mkdir -p "$TARGET_DIR"
          
          # Copy the source image with the new filename
          cp "$SOURCE_IMAGE" "$NEW_FILE_PATH"
          
          echo "Successfully updated image: $TARGET_BASENAME (old: $TARGET_PATH, new: $NEW_FILE_PATH)"
          
          # Record the new path for the commit
          echo "UPDATED_IMAGE_PATH=$NEW_FILE_PATH" >> $GITHUB_ENV
      
      - name: Update configuration file
        run: |
          # If this is a new image that doesn't exist in the config yet, add it
          if ! grep -q "$TARGET_PATH" config/image-config.json; then
            # Extract filename without path and extension for a default description
            FILENAME=$(basename "$TARGET_PATH")
            DESCRIPTION="${FILENAME%.*} Image"
            
            # Add to both site_images and available_images
            NEW_ENTRY="{\"path\":\"$TARGET_PATH\",\"description\":\"$DESCRIPTION\",\"category\":\"Image\"}"
            
            # Use jq to modify the JSON file
            jq --arg entry "$NEW_ENTRY" '.site_images += [$entry | fromjson]' config/image-config.json > config/temp.json
            jq --arg entry "$NEW_ENTRY" '.available_images += [$entry | fromjson]' config/temp.json > config/image-config.json
            rm config/temp.json
            
            echo "Added new image to configuration: $TARGET_PATH"
          fi
      
      - name: Clean up
        run: |
          rm -rf temp_images
      
      - name: Update HTML references
        run: |
          # Create a script to update HTML files to use extension-agnostic references
          cat > update_references.py << 'EOF'
          import os
          import re
          import sys

          def update_html_references(html_dir, image_basename):
              """Update HTML files to use extension-agnostic image references."""
              pattern = re.compile(r'(src=["\'](/images/|images/|/|))' + re.escape(image_basename) + r'\.[a-zA-Z]+(["\'"])')
              replacement = r'\1' + image_basename + r'\3'
              
              for root, _, files in os.walk(html_dir):
                  for file in files:
                      if file.endswith('.html'):
                          filepath = os.path.join(root, file)
                          try:
                              with open(filepath, 'r') as f:
                                  content = f.read()
                              
                              # Check if this file contains references to the image
                              if re.search(pattern, content):
                                  print(f"Updating references in {filepath}")
                                  updated_content = re.sub(pattern, replacement, content)
                                  
                                  with open(filepath, 'w') as f:
                                      f.write(updated_content)
                          except Exception as e:
                              print(f"Error processing {filepath}: {e}")

          if __name__ == "__main__":
              if len(sys.argv) != 3:
                  print("Usage: python update_references.py <html_directory> <image_basename>")
                  sys.exit(1)
                  
              html_dir = sys.argv[1]
              image_basename = sys.argv[2]
              update_html_references(html_dir, image_basename)
          EOF
          
          # Make the script executable
          chmod +x update_references.py
          
          # Extract basename from the target path
          TARGET_BASENAME=$(basename "$TARGET_PATH" | cut -d. -f1)
          
          # Run the script to update references
          python update_references.py . "$TARGET_BASENAME"
          
          echo "Updated HTML references to use extension-agnostic image paths"

      - name: Update image entry in config
        run: |
          # Update the config file to reflect the new file path if it changed
          if [ "$TARGET_PATH" != "$UPDATED_IMAGE_PATH" ]; then
            # Use jq to replace the path in the config file
            jq --arg old_path "$TARGET_PATH" --arg new_path "$UPDATED_IMAGE_PATH" '
            (.site_images[] | select(.path == $old_path)).path = $new_path |
            (.available_images[] | select(.path == $old_path)).path = $new_path
            ' config/image-config.json > config/temp.json
            
            mv config/temp.json config/image-config.json
            echo "Updated image path in config file"
          fi

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all HTML files that might have been modified
          git add "*.html"
          
          # Add the new image file
          git add "$UPDATED_IMAGE_PATH"
          
          # Add config file
          git add config/image-config.json
          
          # Only add backups directory if it exists
          if [ -d "backups" ]; then
            git add backups/
          fi
          
          TARGET_DESC="${{ github.event.inputs.target_image }}"
          SOURCE_DESC="${{ github.event.inputs.source_image }}"
          COMMIT_MSG="Update image: $TARGET_DESC with $SOURCE_DESC (extension-agnostic)"
          
          git commit -m "$COMMIT_MSG"
          git push

